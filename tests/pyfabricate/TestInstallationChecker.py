
from typing import List

from platform import platform as osPlatform

from unittest import TestSuite
from unittest import main as unitTestMain

from codeallybasic.UnitTestBase import UnitTestBase

from pyfabricate.InstallationChecker import CompletedData
from pyfabricate.InstallationChecker import InstallationChecker

THE_GREAT_MAC_PLATFORM: str = 'macOS'

JQ_CMD:              str = 'jq'
MAC_OS_JQ_PATH:      str = f'/opt/homebrew/bin'
NON_MAC_OS_JQ_PATH: str = f'/usr/bin/'

MAC_OS_JQ_CMD:          str = f'{MAC_OS_JQ_PATH}/{JQ_CMD} --version'
NON_MAC_OS_JQ_CMD:      str = f'{NON_MAC_OS_JQ_PATH}/{JQ_CMD} --version'

PYENV_CMD:             str = 'pyenv'
MAC_OS_PYENV_PATH:     str = f'/opt/homebrew/bin'
NON_MAC_OS_PYENV_PATH: str = f'/usr/bin'

MAC_OS_PYENV_CMD:     str = f'{MAC_OS_PYENV_PATH}/{PYENV_CMD} versions'
NON_MAC_OS_PYENV_CMD: str = f'{NON_MAC_OS_PYENV_PATH}/{PYENV_CMD} versions'

# noinspection SpellCheckingInspection
TEST_STR: str = """
  system
  3.9.16
  3.10.10
  3.10.13
  3.11.0
  3.11.5
  3.11.7
  3.11.9
  3.12.0
  3.12.1
* 3.12.4 (set by /Users/humberto.a.sanchez.ii/PycharmProjects/pyfabricate/.python-version)
"""

TEST_LIST_LENGTH: int = 11      # The number of strings in TEST_STR


class TestInstallationChecker(UnitTestBase):
    """
    Auto generated by the one and only:
        Gato Malo â€“ Humberto A. Sanchez II
        Generated: 04 October 2024
    """

    @classmethod
    def setUpClass(cls):
        super().setUpClass()

    def setUp(self):
        super().setUp()

    def tearDown(self):
        super().tearDown()

    def testRunCommandFail(self):
        status: int = InstallationChecker.runCommand('/bogus/bin/fail')
        self.assertNotEqual(0, status, 'This should fail')

    def testRunCommandPass(self):
        platform: str = osPlatform(terse=True)
        if platform.startswith(THE_GREAT_MAC_PLATFORM) is True:
            status: int = InstallationChecker.runCommand(MAC_OS_JQ_CMD)
        else:
            status = InstallationChecker.runCommand(NON_MAC_OS_JQ_CMD)

        self.assertEqual(0, status, 'This should pass')

    def testRunCommandReturnOutput(self):

        platform: str = osPlatform(terse=True)
        if platform.startswith(THE_GREAT_MAC_PLATFORM) is True:
            completedData: CompletedData = InstallationChecker.runCommandReturnOutput(MAC_OS_PYENV_CMD)
            self.assertEqual(0, completedData.status)

    def testToList(self):

        retList: List[str] = InstallationChecker.toList(TEST_STR)

        self.assertEqual(TEST_LIST_LENGTH, len(retList))


def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestInstallationChecker))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
